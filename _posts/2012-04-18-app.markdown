---
layout: default
title: מדריך Rails Girls לבניית אפליקציה
permalink: app
---

# מדריך Rails Girls לבניית אפליקציה

*נוצר על-ידי Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**ודאי ש-Rails מותקן אצלך.** [**קראי את מדריך ההתקנה**](/install) כדי להכין את המחשב שלך.


## הכירי את כלי העבודה

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>
### עורך טקסט

[Sublime Text](http://www.sublimetext.com), [Komodo Edit](http://www.activestate.com/komodo-edit), Vim, Emacs, ו-Gedit הם דוגמאות לעורכי טקסט שאת יכולה להשתמש בהם לכתיבת קוד ועריכת קבצים.

<h3><i class="icon-prompt">&nbsp;</i></h3>
### Terminal (נקרא גם Prompt ב-Windows)
כאן את מפעילה את שרת ה-Rails ומריצה פקודות.

<h3><i class="icon-browser">&nbsp;</i></h3>
### דפדפן
(Firefox, Safari, Chrome) לצפייה באפליקציה שלך.

</div>

### חשוב!

חשוב שתבחרי בהוראות המתאימות למערכת ההפעלה שלך - ההוראות שאת צריכה להריץ על Windows מעט שונות מאלו של Mac או Linux. אם את נתקלת בבעיות, בדקי את בלינקים שמתחת לכל סט של הוראות, אלו משנים את ההוראות הכתובות בהתאם למערכת ההפעלה שנבחרה.

## *1.*יצירת האפליקציה

אנחנו הולכים ליצור אפליקציית Rails חדשה בשם *railsgirls*.

ראשית, נפתח את הטרמינל:

* Mac OS X: פתחי את Spotlight, כיתבי *Terminal* ולחצי על אפליקצית ה-*Terminal*.
* Windows: לחצי Start וחפשי את *Command Prompt*, אחר כך, לחצי על *Command Prompt with Ruby on Rails*.
* Linux (Ubuntu): חפשי את *Terminal* על שולחן העבודה ולחצי על *Terminal*.

לאחר מכן הקלידי את הפקודות הבאות בטרמינל:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
את יכולה לוודא שתיקייה בשם <code>projects</code> אכן נוצרה ע"י הרצת הפקודה: <code>ls</code>. את אמורה לראות את תיקיית ה-<code>projects</code> ב-output. עכשיו את רוצה לשנות את התיקייה שבה את נמצאת כרגע לתיקיית ה-<code>projects</code> ע"י הרצת הפקודה:
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
תוכלי לוודא שאת נמצאת עכשיו בתיקייה ריקה או שוב ע"י שימוש בפקודה <code>ls</code>. עכשיו את רוצה ליצור אפליקצייה חדשה בשם <code>railsgirls</code> ע"י הרצת הפקודה:      
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
זה יצור אפליקציה חדשה בתוך התיקייה <code>railsgirls</code>, ולכן שוב נרצה לשנות את התיקייה הנוכחית להיות בתוך אפליקציית ה-Rails שלנות, ע"י הרצת:
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
אם תריצי את הפקודה <code>ls</code> בתוך התיקייה את תראי תיקיות כדוגמת <code>app</code> ו-<code>config</code>. את יכולה להפעיל את שרת ה-rails ע"י הרצת:
    </div>      

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
את יכולה לוודא שתיקייה בשם <code>projects</code> אכן נוצרה ע"י הרצת הפקודה: <code>dir</code>. את אמורה לראות את תיקיית ה-<code>projects</code> ב-output. עכשיו את רוצה לשנות את התיקייה שבה את נמצאת כרגע לתיקיית ה-<code>projects</code> ע"י הרצת הפקודה:
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
תוכלי לוודא שאת נמצאת עכשיו בתיקייה ריקה או שוב ע"י שימוש בפקודה <code>dir</code>. עכשיו את רוצה ליצור אפליקצייה חדשה בשם <code>railsgirls</code> ע"י הרצת הפקודה:      
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
זה יצור אפליקציה חדשה בתוך התיקייה <code>railsgirls</code>, ולכן שוב נרצה לשנות את התיקייה הנוכחית להיות בתוך אפליקציית ה-Rails שלנות, ע"י הרצת:
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
אם תריצי את הפקודה <code>ls</code> בתוך התיקייה את תראי תיקיות כדוגמת <code>app</code> ו-<code>config</code>. את יכולה להפעיל את שרת ה-rails ע"י הרצת:
    </div>  

{% highlight sh %}
ruby bin\rails server
{% endhighlight %}

  </div>
</div>

**משתמשות Windows:** יתכן ותצטרכי להחליף את `bin\rails` עם `script\rails` או פשוט לכתוב `rails server` במקום כל הפקודה, תלוי בגירסת ה-Rails שמותקנת אצלך.

פתחי את הדפדפן שלך וגילשי לכתובת [http://localhost:3000](http://localhost:3000). את אמורה לראות עמוד "Welcome aboard", שאומר שיצירת האפליקציה פעלה כראוי.

שימי לב כי בחלון הזה האופציה להרצת פקודה אינה נראית, מכיוון שאת נמצאת כעת בתוך שרת ה-Rails. כשאפשר להריץ פקודות, הטרמינל אמור להראות כך:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

זה נקרא "command prompt". כשה-command prompt אינו נראה אינך יכולה להריץ פקודות חדשות. אם תנסי להריץ את הפקודה `cd` או כל פקודה אחרת, זה לא יעבוד. על מנת לחזור ל-command prompt הרגיל:

לחצי `CTRL-C` בטרמינל כדי לכבות את השרת.

**מדריך/ה:** הסבירי מה כל פקודה עושה. מה ג'ונרט? מה עושה השרת?


## *2.*יצירת שלד רעיון

אנחנו הולכים להשתמש בפונקציונליות ה-scaffold (שלד) של Rails כדי ליצור אפליקציה התחלתית שמאפשרת לנו להציג רשימה, להוסיף, למחוק, לערוך ולצפות בדברים; במקרה שלנו: רעיונות.

**מדריך/ה:** מה זה scaffolding ב-Rails? (הסבר/הסבירי את הפקודה, את שם ה-model ואת הטבלה המשוייכת לו, naming conventions, מאפיינים וטיפוסים, וכו'.) מהן מיגרציות ובשביל מה צריך אותן?

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}
  </div>
</div>

ה-scaffold מייצר קבצים חדשים בתיקיית הפרוייקט שלך, אבל כדי לגרום לזה לעבוד כמו שצריך אנחנו צריכים להריץ כמה פקודות נוספות כדי לעדכן את ה-database שלנו ולאתחל את השרת.

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
rake db:migrate
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
rake db:migrate
ruby bin\rails server
{% endhighlight %}
  </div>
</div>

גלשי לכתובת [http://localhost:3000/ideas](http://localhost:3000/ideas) בדפדפן שלך. לחצי מסביב ובדקי את מה שקיבלת באמצעות הרצת מעט הפקודות האלו.

לחצי `CTRL-C` כדי לכבות את השרת שוב אחרי ששיחקת קצת עם האפליקציה.


## *3.*עיצוב

**מדריך/ה:** דברי על הקשר בין HTML ו-Rails. אלו חלקים מה-views הם HTML ואלו הם Embedded Ruby (ERB)? מה זה MVC ואיך זה מתקשר לעניננו? (Models ו-controllers אחראיים לייצור תצוגות ה-HTML.)

האפליקציה עדיין לא נראית משהו. בואי נעשה עם זה משהו. נוסיף את הפרוייקט Twitter Bootstrap כדי לתת לנו סטייל נחמד יותר בקלות רבה.

פתחי את הקובץ `app/views/layouts/application.html.erb` בעורך הטקסט שלך, ומעל השורה

{% highlight erb %}
<%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
{% endhighlight %}

הוסיפי

{% highlight erb %}
<link rel="stylesheet" href="http://railsgirls.com/assets/bootstrap.css">
{% endhighlight %}

והחליפי את 

{% highlight erb %}
<%= yield %>
{% endhighlight %}

ב-

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

בואי נוסיף גם בר ניווט ו-footer ל-layout. באותו הקובץ, תחת `<body>` הוסיפי

{% highlight html %}
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <a class="brand" href="/">The Idea app</a>
      <ul class="nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</div>
{% endhighlight %}

ולפני `</body>` הוסיפי

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls 2013
  </div>
</footer>
{% endhighlight %}

כעת בואי גם נשנה את העיצוב של טבלת הרעיונות. פתחי את הקובץ `app/assets/stylesheets/application.css` והוסיפי בתחתית

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle !important; border: none !important; }
th { border-bottom: 1px solid #DDD !important; }
{% endhighlight %}

כעת רפרשי את הדפדפן כדי לראות מה השתנה. את יכולה גם לשנות את ה-HTML וה-CSS עוד.

**מדריך/ה:** דבר/י קצת על CSS ו-layouts.


## שלב 4: הוספת אפשרות להעלאת תמונות

אנחנו נצטרך להתקין חתיכת תוכנה שתאפשר לנו להעלות קבצים ב-Rails.

פתחי את הקובץ `Gemfile` בתיקיית הפרוייקט באמצעות עורך הטקסט ומתחת לשורה

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

הוסיפי

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**מדריך/ה:** הסבר/הסבירי מהן ספריות וכיצד הן מועילות. תאר/י מהי תוכנת קוד פתוח.

בטרמינל הריצי:

{% highlight sh %}
bundle
{% endhighlight %}

כעת אנחנו יכולים לג'נרט את הקוד שמטפל בהעלאות. בטרמינל הריצי:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

בשלב זה עליך **לאתחל את שרת ה-Rails** בטרמינל. 

לחצי על CTRL-C בטרמינל כדי לכבות את השרת. ברגע שהוא הפסיק, את יכולה ללחוץ על חץ למעלה כדי לקבל את הפקודה האחרונה שהכנסת, ואז ללחוץ enter כדי להפעיל את השרת שוב.

זה נחוץ על מנת שהאפליקציה תטען את הספרייה שהתווספה.

פתחי את הקובץ `app/models/idea.rb` ומתחת לשורה

{% highlight ruby %}
class Idea < ActiveRecord::Base
{% endhighlight %}

הוסיפי 

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

פתחי את הקובץ `app/views/ideas/_form.html.erb` ושני את 

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

ל- 

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

בדפדפן שלך, הוסיפי רעיון חדש עם תמונה. כשאת מעלה תמונה היא לא נראית כל כך טוב כי היא מציגה רק את הנתיב אל קובץ התמונה, אז בואי נתקן זאת.

פתחי את הקובץ `app/views/ideas/show.html.erb` ושני את 

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

ל- 

{% highlight erb %}
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
{% endhighlight %}

כעת רפרפשי את הדפדפן שלך כדי לראות מה השתנה.

**מדריך/ה:** דבר/י מעט על HTML.


## שלב 5: שיפורים ו-routes

אם תנסי לגלוש ל-[http://localhost:3000](http://localhost:3000) זה יציג לך את מסך ה-"Welcome aboard". בואי נגרום לו להציג את רשימת הרעיונות.

פתחי את הקובץ `config/routes.rb` ואחרי השורה הראשונה הוסיפי

{% highlight ruby %}
root :to => redirect('/ideas')
{% endhighlight %}

בדקי את השינוי ע"י גלישה לכתובת הראשית בדפדפן שלך.

**מדריך/ה:** דבר/י על routes, כולל פרטים על סדר ה-routes והקשר שלהם לקבצים סטטיים.

***משתמשות Rails 3:*** תצטרכו למחוק את הקובץ index.html מתיקיית ה-`/public/` כדי שזה יעבוד.

## הוסיפי עמודים סטטיים לאפליקציה שלך

בואי נוסיף עמודים סטטיים לאפליקציה שלנו שיכילו מידע על יוצרת האפליקציה - את!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

הפקודה הזאת תיצור תיקיה חדשה תחת `/views` שנקראת `/pages` ומתחת לזה קובץ שנקרא `info.html.erb` שהוא יהיה עמוד המידע שלך.

זה מוסיף גם route פשוט חדש ל-routes.rb.

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

כעת את יכולה לפתוח את הקובץ `/views/pages/info.html.erb` ולהוסיף מידע אודותיך ב-HTML ואז לגלוש לכתובת [http://localhost:3000/pages/info](http://localhost:3000/pages/info) בדפדפן שלך כדי לראות את עמוד המידע החדש שלך.


## מה הלאה?

* הוסיפי עיצוב באמצעות HTML ו-CSS
* הוסיפי דירוג <span class="hebrew-fix">f</span>
* השתמשי ב-CoffeeScript (או ב-JavaScript) כדי להוסיף אינטראקטיביות
* הוסיפי resizing לתמונה כדי לזרז את טעינת התמונות


## מדריכים נוספים

* מדריך 0: [Cheatsheet שימושי ל-Ruby, Rails, console ועוד.](https://github.com/PragTob/rails-beginner-cheatsheet)
* מדריך 1: [הוסיפי תגובות מאת Janika Liiv](/commenting)
* מדריך 2: [העלי את האפליקצייה שלך לאינטרנט עם Heroku מאת Terence Lee](/heroku)
* מדריך 3: [בני מפה של משתתפות הסדנה מאת Rails Girls Berlin (אנגלית)](http://railsgirlsberlin.de/apptutorial/)
* מדריך 4: [צרי תמונות מוקטנות (thumbnail) עבור תמונות שהועלו לאפליקצייה מאת Miha Filej](/thumbnails)
* מדריך 5: [הוסיפי עיצוב באמצעות HTML ו-CSS מאת Alex Liao](/design)
* מדריך 6: [הוסיפי אותנטיקציה (משתמשים) עם Devise מאת Piotr Steininger](/devise/)
* מדריך 7: [קראי הסברים נוספים אודות האפליקצייה מאת Lucy Bain](https://github.com/lbain/railsgirls)

